const { buildDynamicConfig } = require('../dynamic-config/buildDynamicConfig.cjs');
const semver = require('semver');
const config = buildDynamicConfig();

module.exports = {
    plugins: [
        'react',
        'react-hooks',
    ],
    rules: {
        'react/boolean-prop-naming': 'off',
        'react/button-has-type': 'warn',
        'react/default-props-match-prop-types': 'warn',
        'react/destructuring-assignment': 'off',
        'react/display-name': 'off',
        'react/forbid-component-props': 'off',
        'react/forbid-dom-props': 'off',
        'react/forbid-elements': 'off',
        'react/forbid-foreign-prop-types': 'off',
        'react/forbid-prop-types': 'off',
        'react/function-component-definition': 'off',
        'react/jsx-curly-newline': 'warn',
        'react/jsx-no-script-url': 'error',
        'react/jsx-no-useless-fragment': ['warn', {
            allowExpressions: true,
        }],
        'react/jsx-props-no-spreading': 'off',
        'react/no-access-state-in-setstate': 'warn',
        'react/no-adjacent-inline-elements': 'warn',
        'react/no-array-index-key': 'warn',
        'react/no-children-prop': 'error',
        'react/no-danger': 'off',
        'react/no-danger-with-children': 'error',
        'react/no-deprecated': 'warn',
        'react/no-did-mount-set-state': 'warn',
        'react/no-did-update-set-state': 'warn',
        'react/no-direct-mutation-state': 'warn',
        'react/no-find-dom-node': 'error',
        'react/no-is-mounted': 'error',
        'react/no-multi-comp': [
            'warn',
            {
                ignoreStateless: true,
            },
        ],
        'react/no-redundant-should-component-update': 'off',
        'react/no-render-return-value': 'error',
        'react/no-set-state': 'off',
        'react/no-string-refs': 'error',
        'react/no-this-in-sfc': 'error',
        'react/no-typos': 'error',
        'react/no-unescaped-entities': 'error',
        'react/no-unknown-property': 'off',
        // TBD
        'react/no-unsafe': 'off',
        'react/no-unused-prop-types': 'warn',
        'react/no-unused-state': 'warn',
        'react/no-will-update-set-state': 'error',
        'react/prefer-es6-class': 'warn',
        'react/prefer-read-only-props': 'off',
        'react/prefer-stateless-function': ['warn', {
            ignorePureComponents: true,
        }],
        'react/prop-types': ['warn', { ignore: ['children', 'params'] }],
        'react/react-in-jsx-scope': config.react && semver.gte(config.react, '17.0.0') ? 'off' : 'error',
        'react/require-default-props': 'off',
        'react/require-optimization': 'off',
        'react/require-render-return': 'error',
        'react/self-closing-comp': 'warn',
        'react/sort-comp': [
            'warn',
            {
                order: [
                    'static-variables',
                    'static-methods',
                    'instance-variables',
                    'lifecycle',
                    'everything-else',
                    'render',
                ],
                groups: {
                    lifecycle: [
                        'displayName',
                        'propTypes',
                        'contextTypes',
                        'childContextTypes',
                        'mixins',
                        'statics',
                        'defaultProps',
                        'getDefaultProps',
                        'state',
                        'getInitialState',
                        'constructor',
                        'getChildContext',
                        'getDerivedStateFromProps',
                        'componentWillMount',
                        'UNSAFE_componentWillMount',
                        'componentDidMount',
                        'componentWillReceiveProps',
                        'UNSAFE_componentWillReceiveProps',
                        'shouldComponentUpdate',
                        'componentWillUpdate',
                        'UNSAFE_componentWillUpdate',
                        'getSnapshotBeforeUpdate',
                        'componentDidUpdate',
                        'componentDidCatch',
                        'componentWillUnmount',
                    ],
                },
            },
        ],
        'react/sort-prop-types': 'off',
        'react/state-in-constructor': 'off',
        'react/style-prop-object': 'off',
        'react/void-dom-elements-no-children': 'off',
        'react/jsx-boolean-value': ['warn', 'always'],
        'react/jsx-child-element-spacing': 'off',
        'react/jsx-closing-bracket-location': ['warn', 'tag-aligned'],
        'react/jsx-closing-tag-location': 'warn',
        'react/jsx-curly-brace-presence': [
            'warn',
            {
                props: 'never',
                children: 'never',
            },
        ],
        'react/jsx-curly-spacing': ['warn', 'never'],
        'react/jsx-equals-spacing': ['warn', 'never'],
        'react/jsx-filename-extension': ['error', {
            extensions: ['.js', '.jsx', '.tsx'],
        }],
        'react/jsx-first-prop-new-line': 'off',
        'react/jsx-fragments': ['warn', 'element'],
        'react/jsx-handler-names': 'warn',
        'react/jsx-indent': ['warn', 4],
        'react/jsx-indent-props': 'off',
        'react/jsx-key': 'error',
        'react/jsx-max-depth': ['warn', { max: 13 }],
        'react/jsx-one-expression-per-line': 'off',
        'react/jsx-max-props-per-line': ['warn', { maximum: 1, when: 'multiline' }],
        'react/jsx-no-bind': [
            'warn',
            {
                ignoreRefs: true,
                ignoreDOMComponents: false,
            },
        ],
        'react/jsx-no-comment-textnodes': 'error',
        'react/jsx-no-duplicate-props': 'warn',
        'react/jsx-no-literals': 'off',
        'react/jsx-no-target-blank': 'off',
        'react/jsx-no-undef': 'error',
        'react/jsx-pascal-case': 'warn',
        'react/jsx-props-no-multi-spaces': 'warn',
        'react/jsx-sort-default-props': 'off',
        'react/jsx-sort-props': 'off',
        'react/jsx-tag-spacing': [
            'warn',
            {
                closingSlash: 'never',
                beforeSelfClosing: 'never',
                afterOpening: 'never',
                beforeClosing: 'never',
            },
        ],
        'react/jsx-uses-react': 'error',
        'react/jsx-uses-vars': 'error',
        'react/jsx-wrap-multilines': 'warn',
        'react/static-property-placement': 'warn',
        'react-hooks/rules-of-hooks': 'error',
        'react-hooks/exhaustive-deps': 'error',
        'react/prefer-exact-props': 'off',
        'react/no-unstable-nested-components': ['error', {
            allowAsProps: true,
        }],
        'react/no-namespace': 'error',
        'react/no-arrow-function-lifecycle': 'warn',
        'react/jsx-no-leaked-render': 'error',
        'react/jsx-no-constructed-context-values': 'error',
        'react/iframe-missing-sandbox': 'error',
    },
    overrides: [
        {
            files: ['**/*.ts', '**/*.tsx'],
            rules: {
                'react/prop-types': 'off',
                'react/no-unused-prop-types': 'off',
                'react/jsx-no-undef': 'off',
                'react/default-props-match-prop-types': 'off',
            },
        },
    ],
};
